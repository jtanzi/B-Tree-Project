/*
Node class functions definitions file
*/

#include <iostream>
#include "Node.h"

using namespace std;

//Construction
/*
Node constructor
*/
Node::Node()
{
	tp0 = 9999;
	tp1 = 9999;
	tp2 = 9999;
	int n_type = 0;
	SSN1 = "NULL";
	SSN2 = "NULL";
	SSN3 = "NULL";
	rid1 = 999999;
	rid2 = 999999;
	rid3 = 999999;
	sib_p = 9999;
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::load_from_page(int pid, string memspace[2000][500])
{
	//Load the page into memory
	
	string a[8];

	for (int i = 0; i < 8; i++)
	{
		a[i] = memspace[pid][i];
	}

	//Parse the page records according to node type
	
	int node_type = a[0];

	if (node_type == 0) //Internal node detected
	{
		n_type = 0;
		tp0 = a[1];
		SSN1 = a[2];
		tp1 = a[3];
		SSN2 = a[4];
		tp2 = a[5];
	}
	else  //Leaf node detected
	{
		n_type = 1;
		SSN1 = a[1];
		rid1 = a[2];
		SSN2 = a[3];
		rid2 = a[4];
		SSN3 = a[5];
		rid3 = a[6];
		sib_p = a[7];
	}
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::write_to_page(int pid, string memspace[2000][500])
{
	//Parse and write to page according to node type

	if (n_type == 0) //Internal node format
	{
		memspace[pid][0] = pad_value(n_type, 1);
		memspace[pid][1] = pad_value(tp0, 4);
		memspace[pid][2] = SSN1;
		memspace[pid][3] = pad_value(tp1, 4);
		memspace[pid][4] = SSN2;
		memspace[pid][5] = pad_value(tp2, 4);
	}
	else  //Leaf node format
	{
		memspace[pid][0] = pad_value(n_type, 1);
		memspace[pid][1] = SSN1;
		memspace[pid][2] = pad_value(rid1, 6);
		memspace[pid][3] = SSN2;
		memspace[pid][4] = pad_value(rid2, 6);
		memspace[pid][5] = SSN3;
		memspace[pid][6] = pad_value(rid3, 6);
		memspace[pid][7] = pad_value(sid_p, 4);
	}
	
}


//***Getters***

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
int Node::get_n_type()
{
	return n_type;	
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
int Node::get_tp(int tp_num)
{
	switch (tp_num)
	{
		case 0:
			return tp0;
	
		case 1:
			return tp1;

		case 2:
			return tp2;
	}		
}


/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
string Node::get_SSN(int ssn_num)
{
	switch (ssn_num)
	{
		case 1:
			return SSN1;
	
		case 2:
			return SSN2;

		case 3:
			return SSN3;
	}	
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
int Node::get_rid(int rid_num)
{
	switch (rid_num)
	{
		case 1:
			return rid1;
	
		case 2:
			return rid2;

		case 3:
			return rid3;
	}
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
int Node::get_sib_p()
{
	return sib_p;
}

//Setters

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::set_n_type(int value)
{
	n_type = value;	
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::set_tp(int tp_num, int value)
{
	switch (tp_num)
	{
		case 0:
			tp0 = value;
			break;

		case 1:
			tp1 = value;
			break;

		case 2:
			tp2 = value;
			break;
	}		
}


/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::set_SSN(int ssn_num, string value)
{
	switch (ssn_num)
	{
		case 1:
			SSN1 = value;
			break;

		case 2:
		 	SSN2 = value;
			break;

		case 3:
			SSN3 = value;
			break;
	}	
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::set_rid(int rid_num, int value)
{
	switch (rid_num)
	{
		case 1:
			rid1 = value;
			break;

		case 2:
			rid2 = value;
			break;

		case 3:
			rid3 = value;
			break;
	}
}

/*
Function Name: 
Description: 
Arguments: 
Returns: 
*/
void Node::set_sib_p(int value)
{
	sib_p = value;
}

